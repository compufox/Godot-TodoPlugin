[gd_scene load_steps=9 format=2]

[ext_resource path="res://addons/TodoPlugin/assets/library-plus.png" type="Texture" id=1]
[ext_resource path="res://addons/TodoPlugin/assets/delete.png" type="Texture" id=2]
[ext_resource path="res://addons/TodoPlugin/assets/settings.png" type="Texture" id=3]
[ext_resource path="res://addons/TodoPlugin/assets/pencil.png" type="Texture" id=4]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Control

# our config path; this wont change
const ConfPath = \"res://addons/TodoPlugin/todo.cfg\"
const TodoRegex = \"^(\\\\s+)?#(\\\\s+)?(T|t)(O|o)(D|d)(O|o):?\\\\s+(?<title>.*)\"
const CommentRegex = \"^(\\\\s+)?#(\\\\s+)?(?<comment>.*)\"

# node refs
onready var AddDialog     = $AddWindow
onready var ConfigDialog  = $ConfigWindow
onready var DisplayDialog = $ViewWindow
onready var ItemTree = $Dock/Items

# variables
onready var _root = ItemTree.create_item()
var _todo_file = ConfigFile.new()
var _conf_file = ConfigFile.new()
var _todo_regex = RegEx.new()
var _comment_regex = RegEx.new()

# our config vars
var todo_path
var src_location
var scan_interval
var scan_src
var backup


func _ready():
    _todo_regex.compile(TodoRegex)
    _comment_regex.compile(CommentRegex)
    
    _conf_file.load(ConfPath)
    _load_config()
    
    var f = File.new()
    if f.file_exists(todo_path):
        _todo_file.load(todo_path)
        _load()
    else:
        _todo_file.save(todo_path)
    
# saves the config file and also the todo file
func _save():
    _conf_file.save(ConfPath)
    _todo_file.save(todo_path)

# makes a backup of the todo file
func _make_backup():
    _save()
    
    var bak = Directory.new()
    bak.copy(todo_path, todo_path + '.bak')

# load all of our current todos
func _load():
    for section in _todo_file.get_sections():
        _add_to_tree(_todo_file.get_value(section, \"title\"),
                     _todo_file.get_value(section, \"comment\"))

# loads all values from our config file
func _load_config():
    todo_path = _conf_file.get_value(\"config\", \"save_path\")
    src_location = _conf_file.get_value(\"config\", \"scan_location\")
    scan_interval = _conf_file.get_value(\"config\", \"scan_source_timeout\") * 60
    scan_src = _conf_file.get_value(\"config\", \"scan_source\")
    backup = _conf_file.get_value(\"config\", \"backup\")
    
    if scan_src:
        $SourceScan.wait_time = scan_interval
        $SourceScan.start()
    else:
        $SourceScan.stop()
    
func _add_to_tree(title, comment):
    var title_item = ItemTree.create_item(_root)
    title_item.set_text(0, title)
    title_item.set_collapsed(true)
    
    var comment_item = ItemTree.create_item(title_item)
    comment_item.set_selectable(0, false)
    comment_item.set_text(0, comment)
    
    # after we've added it to our tree, we add it into the db
    _add_item(title, comment)

# add a new item to the config file
func _add_item(title, comment):
    var key = str(title.hash())
    
    # if our title doesn't exist in the config file then we
    #  add our data
    if not _todo_file.has_section(key):
        _todo_file.set_value(key, \"title\", title)
        _todo_file.set_value(key, \"comment\", comment)
        _save()

func _update_item(original_title, new_title, new_comment):
    var okey = str(original_title.hash())
    
    if _todo_file.has_section(okey):
        _del_item(original_title)
        _add_item(new_title, new_comment)

# deletes an item from the config file
func _del_item(title):
    _todo_file.erase_section(str(title.hash()))
    _todo_file.save(todo_path)

# display our add item dialog
func _on_AddTodo_pressed():
    AddDialog.popup_centered()
    
# callback for when the popup is closing
func _on_AddWindow_popup_hide():
    if AddDialog.new_item != null:
        _add_to_tree(AddDialog.new_item.front(), AddDialog.new_item.back())

# display our config popup
func _on_SettingsBtn_pressed():
    ConfigDialog.open(_conf_file)

# when the delete button is pressed
func _on_DeleteBtn_pressed():
    if ItemTree.get_selected() != null:
        $DeleteDialog.popup_centered()

# when an item in the  tree gets double clicked
#  we open up the detail dialog
func _on_item_activated():
    var clicked = ItemTree.get_selected()
    var child = clicked.get_children()
    
    if child != null:
        DisplayDialog.open(clicked.get_text(0), child.get_text(0))

# when the config window is hiding we can check here to 
#  see if any options have been set
func _on_ConfigWindow_popup_hide():
    var options = ConfigDialog.conf_options
    if options != null:
        var path = options.pop_front()
        
        #  if the save path is changed
        if not path.empty() and path != todo_path:
            # remove the old file, so we don't litter the
            #  filesystem
            var dir = Directory.new()
            dir.remove(todo_path)
            
            # set the new path, and then set our variable
            _conf_file.set_value(\"config\", \"save_path\", path)
        
        var scan = options.pop_front()
        _conf_file.set_value(\"config\", \"scan_source\", scan)
        
        if scan:
            _conf_file.set_value(\"config\", \"scan_location\", options.pop_front())
            _conf_file.set_value(\"config\", \"scan_source_timeout\", options.pop_front())
        
        _conf_file.set_value(\"config\", \"backup\", options.pop_front())
        
        # save! save, save, save!
        _save()
        _load_config()

# when the view window hides we check to see if values were edited
func _on_ViewWindow_popup_hide():
    if DisplayDialog.edits != null:
        var item = ItemTree.get_selected()
        var child = item.get_children()
        
        item.set_text(0, DisplayDialog.edits[0])
        child.set_text(0, DisplayDialog.edits[1])
        _update_item(DisplayDialog.original[0],
                     DisplayDialog.edits[0],
                     DisplayDialog.edits[1])

# if the user confirmed deleting an entry
func _on_DeleteDialog_confirmed():
    var item = ItemTree.get_selected()
    
    # if the item doesn't have children then it's a comment
    #  and we don't remove it
    if item.get_children() != null:
        _del_item(item.get_text(0))
        _root.remove_child(item)

# start a scan of the source
func _scan_source():
    _scan_dir(src_location)
    
    # restart our scan
    if scan_src:
        $SourceScan.start()

# scan a directory for source files, while recursing
#  into any subdirs
func _scan_dir(directory):
    var dir = Directory.new()
    if dir.open(directory) == OK and dir.list_dir_begin(true, true) == OK:
        var current = dir.get_next()
        while not current.empty():
            if dir.current_is_dir():
                _scan_dir(current)
            elif current.ends_with(\".gd\") or current.ends_with(\".cs\"):
                _scan_file(current)

# scan a file for todo comments
func _scan_file(f):
    var file = File.new()
    
    if file.open(f) == OK:
        var line = file.get_line()
        var matched = null
        var catching = false
        var filename = f.split('/').back()
        var comment = PoolStringArray()
        var title = \"\"
        
        while not line.empty():
            matched = _todo_regex.search(line)  
            
            if catching:
                var comm_match = _comment_regex.search(line)
                # this is where we start capturing the comments
                #  underneath the todo
                
                if comm_match != null:
                    comment.append(comm_match.get_string(\"comment\"))
                else:
                    catching = false
                    _add_to_tree(title,
                                 filename + \" \" + comment.join(\" \"))
                    
            
            # check for our title down here first
            #  so we don't catch our title as a comment
            if matched != null and not catching:
                catching = true
                title = matched.get_string(\"title\")  
            
            line = file.get_line()"

[sub_resource type="GDScript" id=2]
script/source = "tool
extends WindowDialog

onready var title   = $Elements/Title/Title
onready var comment = $Elements/Text

var new_item = null

func _on_about_to_show():
    new_item = null

func _on_popup_hide():
    title.set_text('')
    comment.set_text('')

func _on_CancelBtn_pressed():
    hide()

func _on_AddBtn_pressed():
    new_item = [title.get_text(), comment.get_text()]
    hide()
"

[sub_resource type="GDScript" id=3]
script/source = "tool
extends WindowDialog

onready var title_label = $Elements/TitleElements/TitleLbl
onready var title_edit  = $Elements/TitleElements/TitleEdit
onready var comment_label = $Elements/Text

var edited = false
var original = []
var edits = null

func open(title, comment):
    title_label.show()
    title_edit.hide()
    comment_label.set_readonly(true)
    
    title_label.set_text(title)
    comment_label.set_text(comment)
    original = [title, comment]
    edits = null
    edited = false
    
    .popup_centered()

func _on_CloseBtn_pressed():
    hide()

func _on_EditBtn_pressed():
    if not edited:
        title_label.hide()
        title_edit.set_text(title_label.get_text())
        title_edit.show()
        comment_label.set_readonly(false)
    else:
        title_label.set_text(title_edit.get_text())
        title_label.show()
        title_edit.hide()
        comment_label.set_readonly(true)
        
        if title_label.get_text() != original.front() or \\
           comment_label.get_text() != original.back():
            edits = [title_edit.get_text(),
                     comment_label.get_text()]
    
    edited = not edited"

[sub_resource type="GDScript" id=4]
script/source = "tool
extends WindowDialog

onready var save_path = $Elements/SavePath/SavePathEdt
onready var scan_src  = $Elements/Source/ScanSrcChk
onready var src_location = $Elements/SrcLocation/SrcLocationEdt
onready var src_timeout  = $Elements/SrcTimeout/ScanTimeoutSpn
onready var backup = $Elements/BackupCheck/BakChk

var conf_options = null

func open(config):
    save_path.set_text(config.get_value(\"config\", \"save_path\"))
    scan_src.set_pressed(config.get_value(\"config\", \"scan_source\"))
    src_location.set_text(config.get_value(\"config\", \"scan_location\"))
    src_timeout.set_value(config.get_value(\"config\", \"scan_source_timeout\"))
    backup.set_pressed(config.get_value(\"config\", \"backup\"))
    
    .popup_centered()

func _on_ConfigWindow_about_to_show():
    conf_options = null

func _on_CancelBtn_pressed():
    hide()

func _on_SaveBtn_pressed():
    conf_options = []
    conf_options.append(save_path.get_text())
    
    var scan = scan_src.is_pressed()
    conf_options.append(scan)
    
    if scan:
        conf_options.append(src_location.get_text())
        conf_options.append(src_timeout.get_value())
    
    conf_options.append(backup.is_pressed())
        
    _on_CancelBtn_pressed()
"

[node name="Todo" type="Control"]
margin_left = 5.0
margin_top = 3.0
margin_right = 178.0
margin_bottom = 242.0
script = SubResource( 1 )
__meta__ = {
"_edit_horizontal_guides_": [  ],
"_edit_vertical_guides_": [ 332.929, 670.653 ]
}

[node name="SourceScan" type="Timer" parent="."]
wait_time = 5.0

[node name="BackupTimer" type="Timer" parent="."]
process_mode = 0
wait_time = 600.0
autostart = true

[node name="Dock" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="DockButtons" type="HBoxContainer" parent="Dock"]
margin_right = 173.0
margin_bottom = 30.0
custom_constants/separation = -2

[node name="AddTodo" type="Button" parent="Dock/DockButtons"]
margin_right = 105.0
margin_bottom = 30.0
size_flags_horizontal = 3
text = "Add Item"
icon = ExtResource( 1 )

[node name="DeleteBtn" type="Button" parent="Dock/DockButtons"]
margin_left = 103.0
margin_right = 139.0
margin_bottom = 30.0
size_flags_horizontal = 5
icon = ExtResource( 2 )
flat = true

[node name="SettingsBtn" type="Button" parent="Dock/DockButtons"]
margin_left = 137.0
margin_right = 173.0
margin_bottom = 30.0
size_flags_horizontal = 5
icon = ExtResource( 3 )
flat = true

[node name="Items" type="Tree" parent="Dock"]
margin_top = 34.0
margin_right = 173.0
margin_bottom = 239.0
size_flags_vertical = 3
allow_reselect = true
allow_rmb_select = true
hide_root = true

[node name="AddWindow" type="WindowDialog" parent="."]
editor/display_folded = true
margin_left = 297.0
margin_top = 98.0
margin_right = 691.0
margin_bottom = 386.0
window_title = "Add New Todo"
script = SubResource( 2 )

[node name="Elements" type="VBoxContainer" parent="AddWindow"]
editor/display_folded = true
margin_left = 31.0
margin_top = 14.0
margin_right = 368.0
margin_bottom = 222.0
custom_constants/separation = 10

[node name="Title" type="HBoxContainer" parent="AddWindow/Elements"]
editor/display_folded = true
margin_right = 337.0
margin_bottom = 24.0
custom_constants/separation = 9

[node name="TitleLbl" type="Label" parent="AddWindow/Elements/Title"]
margin_top = 5.0
margin_right = 36.0
margin_bottom = 19.0
text = "Title: "

[node name="Title" type="LineEdit" parent="AddWindow/Elements/Title"]
margin_left = 45.0
margin_right = 337.0
margin_bottom = 24.0
size_flags_horizontal = 3
clear_button_enabled = true
placeholder_text = "Title"

[node name="TextLbl" type="Label" parent="AddWindow/Elements"]
margin_top = 34.0
margin_right = 337.0
margin_bottom = 48.0
text = "Comment: "

[node name="Text" type="TextEdit" parent="AddWindow/Elements"]
margin_top = 58.0
margin_right = 337.0
margin_bottom = 208.0
size_flags_horizontal = 3
size_flags_vertical = 3
wrap_enabled = true

[node name="ActionButtons" type="HBoxContainer" parent="AddWindow"]
editor/display_folded = true
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 31.0
margin_top = -46.0
margin_right = -26.0
margin_bottom = -17.0
custom_constants/separation = 24

[node name="CancelBtn" type="Button" parent="AddWindow/ActionButtons"]
margin_right = 156.0
margin_bottom = 29.0
size_flags_horizontal = 3
text = "Cancel"

[node name="AddBtn" type="Button" parent="AddWindow/ActionButtons"]
margin_left = 180.0
margin_right = 337.0
margin_bottom = 29.0
size_flags_horizontal = 3
text = "Add Item"

[node name="ViewWindow" type="WindowDialog" parent="."]
editor/display_folded = true
margin_left = 297.0
margin_top = 98.0
margin_right = 691.0
margin_bottom = 386.0
window_title = "Todo Item"
script = SubResource( 3 )

[node name="Elements" type="VBoxContainer" parent="ViewWindow"]
margin_left = 31.0
margin_top = 14.0
margin_right = 368.0
margin_bottom = 222.0
custom_constants/separation = 10

[node name="TitleElements" type="HBoxContainer" parent="ViewWindow/Elements"]
margin_right = 337.0
margin_bottom = 30.0

[node name="TitleLbl" type="Label" parent="ViewWindow/Elements/TitleElements"]
margin_top = 8.0
margin_right = 297.0
margin_bottom = 22.0
size_flags_horizontal = 3
text = "Title: "
align = 1

[node name="TitleEdit" type="LineEdit" parent="ViewWindow/Elements/TitleElements"]
visible = false
margin_left = 150.0
margin_right = 296.0
margin_bottom = 30.0
size_flags_horizontal = 3

[node name="EditBtn" type="Button" parent="ViewWindow/Elements/TitleElements"]
margin_left = 301.0
margin_right = 337.0
margin_bottom = 30.0
hint_tooltip = "Toggle editing mode"
icon = ExtResource( 4 )

[node name="Text" type="TextEdit" parent="ViewWindow/Elements"]
margin_top = 40.0
margin_right = 337.0
margin_bottom = 208.0
size_flags_horizontal = 3
size_flags_vertical = 3
readonly = true
wrap_enabled = true

[node name="ActionButtons" type="HBoxContainer" parent="ViewWindow"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 31.0
margin_top = -46.0
margin_right = -26.0
margin_bottom = -17.0
custom_constants/separation = 24

[node name="CloseBtn" type="Button" parent="ViewWindow/ActionButtons"]
margin_right = 337.0
margin_bottom = 29.0
size_flags_horizontal = 3
text = "Close"

[node name="ConfigWindow" type="WindowDialog" parent="."]
visible = true
margin_left = 297.0
margin_top = 98.0
margin_right = 691.0
margin_bottom = 339.0
window_title = "Todo Configuration"
script = SubResource( 4 )

[node name="Elements" type="VBoxContainer" parent="ConfigWindow"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -166.0
margin_top = 14.0
margin_right = 171.0
margin_bottom = 222.0
custom_constants/separation = 10

[node name="SavePath" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
margin_right = 337.0
margin_bottom = 24.0
custom_constants/separation = 16

[node name="Label" type="Label" parent="ConfigWindow/Elements/SavePath"]
margin_top = 5.0
margin_right = 61.0
margin_bottom = 19.0
text = "Save Path"

[node name="SavePathEdt" type="LineEdit" parent="ConfigWindow/Elements/SavePath"]
margin_left = 77.0
margin_right = 337.0
margin_bottom = 24.0
size_flags_horizontal = 3
placeholder_text = "res://TODO.ini"

[node name="Source" type="HBoxContainer" parent="ConfigWindow/Elements"]
margin_top = 34.0
margin_right = 337.0
margin_bottom = 58.0

[node name="Label" type="Label" parent="ConfigWindow/Elements/Source"]
margin_top = 5.0
margin_right = 213.0
margin_bottom = 19.0
text = "Scan Source for TODO comments"

[node name="ScanSrcChk" type="CheckBox" parent="ConfigWindow/Elements/Source"]
margin_left = 217.0
margin_right = 241.0
margin_bottom = 24.0

[node name="SrcLocation" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
margin_top = 68.0
margin_right = 337.0
margin_bottom = 92.0
custom_constants/separation = 17

[node name="Label" type="Label" parent="ConfigWindow/Elements/SrcLocation"]
margin_top = 5.0
margin_right = 80.0
margin_bottom = 19.0
text = "Script Folder"

[node name="SrcLocationEdt" type="LineEdit" parent="ConfigWindow/Elements/SrcLocation"]
margin_left = 97.0
margin_right = 337.0
margin_bottom = 24.0
size_flags_horizontal = 3
placeholder_text = "res://scripts"

[node name="SrcTimeout" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
margin_top = 102.0
margin_right = 337.0
margin_bottom = 126.0
custom_constants/separation = 27

[node name="Label" type="Label" parent="ConfigWindow/Elements/SrcTimeout"]
margin_top = 5.0
margin_right = 151.0
margin_bottom = 19.0
text = "Scan Timeout (minutes)"

[node name="ScanTimeoutSpn" type="SpinBox" parent="ConfigWindow/Elements/SrcTimeout"]
margin_left = 178.0
margin_right = 252.0
margin_bottom = 24.0
min_value = 1.0
max_value = 15.0
value = 5.0
rounded = true
allow_greater = true
align = 1

[node name="BackupCheck" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
margin_top = 136.0
margin_right = 337.0
margin_bottom = 160.0

[node name="BakLbl" type="Label" parent="ConfigWindow/Elements/BackupCheck"]
margin_top = 5.0
margin_right = 204.0
margin_bottom = 19.0
text = "Automatically backup TODO file"

[node name="BakChk" type="CheckBox" parent="ConfigWindow/Elements/BackupCheck"]
margin_left = 208.0
margin_right = 232.0
margin_bottom = 24.0
pressed = true

[node name="BackupPath" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
visible = false
margin_top = 170.0
margin_right = 337.0
margin_bottom = 194.0
custom_constants/separation = 16

[node name="Label" type="Label" parent="ConfigWindow/Elements/BackupPath"]
margin_top = 5.0
margin_right = 61.0
margin_bottom = 19.0
hint_tooltip = "Have the plugin automatically make a backup of your TODO file"
text = "Save Path"

[node name="SavePathEdt" type="LineEdit" parent="ConfigWindow/Elements/BackupPath"]
margin_left = 77.0
margin_right = 337.0
margin_bottom = 24.0
size_flags_horizontal = 3
placeholder_text = "res://TODO.ini"

[node name="LineWrapping" type="HBoxContainer" parent="ConfigWindow/Elements"]
editor/display_folded = true
visible = false
margin_top = 170.0
margin_right = 337.0
margin_bottom = 194.0
hint_tooltip = "Because tree elements don't provide an automatic text wrapping function we have to do it manually. 
This gives you some control over how many characters can fit per line of comment text."
custom_constants/separation = 27

[node name="Label" type="Label" parent="ConfigWindow/Elements/LineWrapping"]
margin_top = 5.0
margin_right = 123.0
margin_bottom = 19.0
text = "Characters per Line"

[node name="CharCountSpn" type="SpinBox" parent="ConfigWindow/Elements/LineWrapping"]
margin_left = 150.0
margin_right = 224.0
margin_bottom = 24.0
min_value = 1.0
max_value = 150.0
value = 18.0
rounded = true
allow_greater = true
align = 1

[node name="ActionButtons" type="HBoxContainer" parent="ConfigWindow"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 31.0
margin_top = -46.0
margin_right = -26.0
margin_bottom = -17.0
custom_constants/separation = 24

[node name="CancelBtn" type="Button" parent="ConfigWindow/ActionButtons"]
margin_right = 156.0
margin_bottom = 29.0
size_flags_horizontal = 3
text = "Cancel"

[node name="SaveBtn" type="Button" parent="ConfigWindow/ActionButtons"]
margin_left = 180.0
margin_right = 337.0
margin_bottom = 29.0
size_flags_horizontal = 3
text = "Save"

[node name="DeleteDialog" type="ConfirmationDialog" parent="."]
margin_left = 394.0
margin_top = 211.0
margin_right = 594.0
margin_bottom = 281.0
window_title = "Confirm Delete"
dialog_text = "        Delete Todo Item?"
[connection signal="timeout" from="SourceScan" to="." method="_scan_source"]
[connection signal="timeout" from="BackupTimer" to="." method="_make_backup"]
[connection signal="pressed" from="Dock/DockButtons/AddTodo" to="." method="_on_AddTodo_pressed"]
[connection signal="pressed" from="Dock/DockButtons/DeleteBtn" to="." method="_on_DeleteBtn_pressed"]
[connection signal="pressed" from="Dock/DockButtons/SettingsBtn" to="." method="_on_SettingsBtn_pressed"]
[connection signal="item_activated" from="Dock/Items" to="." method="_on_item_activated"]
[connection signal="about_to_show" from="AddWindow" to="AddWindow" method="_on_about_to_show"]
[connection signal="popup_hide" from="AddWindow" to="." method="_on_AddWindow_popup_hide"]
[connection signal="popup_hide" from="AddWindow" to="AddWindow" method="_on_popup_hide"]
[connection signal="pressed" from="AddWindow/ActionButtons/CancelBtn" to="AddWindow" method="_on_CancelBtn_pressed"]
[connection signal="pressed" from="AddWindow/ActionButtons/AddBtn" to="AddWindow" method="_on_AddBtn_pressed"]
[connection signal="popup_hide" from="ViewWindow" to="." method="_on_ViewWindow_popup_hide"]
[connection signal="pressed" from="ViewWindow/Elements/TitleElements/EditBtn" to="ViewWindow" method="_on_EditBtn_pressed"]
[connection signal="pressed" from="ViewWindow/ActionButtons/CloseBtn" to="ViewWindow" method="_on_CloseBtn_pressed"]
[connection signal="about_to_show" from="ConfigWindow" to="ConfigWindow" method="_on_ConfigWindow_about_to_show"]
[connection signal="popup_hide" from="ConfigWindow" to="." method="_on_ConfigWindow_popup_hide"]
[connection signal="pressed" from="ConfigWindow/ActionButtons/CancelBtn" to="ConfigWindow" method="_on_CancelBtn_pressed"]
[connection signal="pressed" from="ConfigWindow/ActionButtons/SaveBtn" to="ConfigWindow" method="_on_SaveBtn_pressed"]
[connection signal="confirmed" from="DeleteDialog" to="." method="_on_DeleteDialog_confirmed"]
